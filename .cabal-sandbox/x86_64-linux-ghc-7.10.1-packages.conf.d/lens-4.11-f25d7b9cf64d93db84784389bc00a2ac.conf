name: lens
version: 4.11
id: lens-4.11-f25d7b9cf64d93db84784389bc00a2ac
key: lens_1CfZyabHiKi7kODFbLZZqC
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Reflection Control.Lens.Internal.Review
    Control.Lens.Internal.Setter Control.Lens.Internal.TH
    Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
    Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
    Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
    Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
    Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
    Control.Lens.Zoom Control.Monad.Error.Lens
    Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
    Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/tmorris/work/osmgarmin/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.1/lens_9PpWRNQo5TqEPhjB1cuG30
library-dirs: /home/tmorris/work/osmgarmin/.cabal-sandbox/lib/x86_64-linux-ghc-7.10.1/lens_9PpWRNQo5TqEPhjB1cuG30
data-dir: /home/tmorris/work/osmgarmin/.cabal-sandbox/share/x86_64-linux-ghc-7.10.1/lens-4.11
hs-libraries: HSlens-4.11-1CfZyabHiKi7kODFbLZZqC
depends:
    array-0.5.1.0-e29cdbe82692341ebb7ce6e2798294f9
    base-4.8.0.0-1b689eb8d72c4d4cc88f445839c1f01a
    bifunctors-5-f2796094deae2b38e57d70dd5d1de3aa
    bytestring-0.10.6.0-0909f8f31271f3d75749190bf2ee35db
    comonad-4.2.6-4eb171622ef5b57a3e2b308a2c80dc7f
    containers-0.5.6.2-2114032c163425cc264e6e1169dc2f6d
    contravariant-1.3.1.1-c9203eb972e14ee5b0c387c8a928b910
    distributive-0.4.4-3a8c8063a788f6bf3bf29703f641316b
    exceptions-0.8.0.2-d0a1666f2cb8df9f117ef197b3558493
    filepath-1.4.0.0-40d643aa87258c186441a1f8f3e13ca6
    free-4.12.1-9749f9e36b6bdc60023d4da4da6312f0
    ghc-prim-0.4.0.0-7c945cc0c41d3b7b70f3edd125671166
    hashable-1.2.3.2-4fb85f7d3eaa73ba55e1838fbc8b1a35
    kan-extensions-4.2.2-814fe3fd495fd481b836c121cdbc7336
    mtl-2.2.1-9986828fc95bc8459870303efaabd81e
    parallel-3.2.0.6-50295e2f539bc154f8540bea6ca80972
    profunctors-5.1.1-25ef1d2de34bb332a987790312c0b083
    reflection-1.5.2.1-e67b06f3afa8faabd0d9497454365bb8
    semigroupoids-5.0.0.2-1e8e8b0f6279009179ccc9c7f1f040fa
    semigroups-0.16.2.2-1151a5ce73b7ad91e0674d000a1e9c75
    tagged-0.8.0.1-09b10cdec517f5afafb7e93011caa61b
    template-haskell-2.10.0.0-e895139a0ffff267d412e3d0191ce93b
    text-1.2.1.1-762041efc151e61dbbe3ea25082cab9c
    transformers-0.4.2.0-c1a7bb855a176fe475d7b665301cd48f
    transformers-compat-0.4.0.4-0ef0c82e02fc5f1fa77c665b35287eb2
    unordered-containers-0.2.5.1-fd4882cf709effd899e8ba0535a0b684
    vector-0.10.12.3-348046575d1c4ff07465be08109c27a1
    void-0.7-070fce18665fb63a4db84e62b3f1e1cc
haddock-interfaces: /home/tmorris/work/osmgarmin/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.1/lens-4.11/html/lens.haddock
haddock-html: /home/tmorris/work/osmgarmin/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.10.1/lens-4.11/html
